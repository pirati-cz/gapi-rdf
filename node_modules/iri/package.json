{
  "name": "iri",
  "description": "IRI/URI parsing and conversion",
  "homepage": "https://github.com/Acubed/node-iri",
  "version": "1.1.1",
  "author": {
    "name": "Austin Wright"
  },
  "keywords": [
    "IRI",
    "URI",
    "URL"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Acubed/node-iri.git",
    "web": "https://github.com/Acubed/node-iri"
  },
  "main": "index.js",
  "scripts": {
    "test": "vows"
  },
  "licenses": [
    {
      "type": "Public domain",
      "url": "http://unlicense.org/"
    }
  ],
  "readme": "# IRI: A utility for converting and parsing URIs and IRIs\n\nUtilities for using <a href=\"http://www.ietf.org/rfc/rfc3987.txt\">RFC 3987</a> and\n<a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>\n\nIRIs are unicode URIs, URIs by definition being 7-bit characters.\n\n## Construction of the URI\n\nFrom <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>:\n\n         foo://example.com:8042/over/there?name=ferret#nose\n         \\_/   \\______________/\\_________/ \\_________/ \\__/\n          |           |            |            |        |\n       scheme     authority       path        query   fragment\n          |   _____________________|__\n         / \\ /                        \\\n         urn:example:animal:ferret:nose\n\nThe authority exists in a URI/IRI and is marked by a leading `//`. It can be broken down into a number of other components:\n\n         root:hunter2@[::1]:8080\n         \\__________/ \\___/ \\__/\n               |        |    |\n           userinfo   host  port\n\n## Usage of `IRI`\n\nThe constructor takes a single argument, a URI or IRI string:\n\n\tvar iri = require('iri');\n\tvar path = new iri.IRI(str).resolveReference('/');\n\n### toString()\n\nReturns UTF-16 IRI\n\n### defrag()\n\nReturns the IRI without the fragment component. Useful for dereferencing URLs on a network.\n\n\tnew IRI().defrag() === 'http://example.com/resource'\n\n### isAbsolute()\n\nIRIs with a fragment are not absolute.\n\n### toAbsolute()\n\nResolves the IRI against itself, having the effect of stripping the fragment and checking that the supplied IRI is valid (absolute).\n\n### authority()\n\nReturns the authority component of the IRI, such as \"user:password@example.com:8080\"\n\n### fragment()\n\nReturns the fragment component of the IRI.\n\n### hierpart()\n\nReturns the hier-part of the IRI, the hierarchial component: Everything between the scheme and query, including leading `//` for the host, if it exists.\n\n### host()\n\nReturns the host component of the URI, either a domain name or string-formatted IP address. Excludes port number and username/password.\n\n### path()\n\nReturns the path component of the hier-part. Does not include the authority/host, query, or fragment.\n\n### port()\n\nReturns the port component of the authority as a string, or null if there is no port.\n\n### query()\n\nReturns the query component of the IRI including leading \"?\", or `null` if there is no query component.\n\n### resolveReference(ref)\n\nResolve the provided URI/IRI reference against this IRI.\n\n### scheme()\n\nReturns the scheme of the IRI, e.g. \"https\", \"file\", or \"urn\".\n\n### userinfo()\n\nReturns the username/password component of the IRI.\n\n### toURIString()\n\nReturns a URI formatted string with only 7-bit characters.\n\n### toIRIString()\n\nDecodes URI-encoded UTF-8 characters and returns a unicode string (Strings in ECMAScript/JavaScript are UTF-16).\n\n### toIRI()\n\nReturns a new IRI object with URI-encoded UTF-8 characters decoded.\n\n\n## Function Usage\n\n### iri.fromURI(uri)\n\nReturns an iri.IRI object with UTF-8 escaped characterd decoded.\n\n### iri.toIRIString(uri)\n\nReturns an IRI string decoded from the given URI.\n\n\n## Tests\n\nTests are available as a Vows test suite. Run `vows` in the package directory to execute.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Acubed/node-iri/issues"
  },
  "_id": "iri@1.1.1",
  "_from": "iri@"
}
