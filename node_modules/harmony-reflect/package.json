{
  "name": "harmony-reflect",
  "version": "1.1.1",
  "description": "ES5 shim for ES6 (ECMAScript 6) Reflect and Proxy objects",
  "main": "reflect.js",
  "keywords": [
    "reflection",
    "proxies",
    "proxy",
    "reflect",
    "harmony",
    "es6"
  ],
  "homepage": "https://github.com/tvcutsem/harmony-reflect",
  "repository": {
    "type": "git",
    "url": "https://tvcutsem@github.com/tvcutsem/harmony-reflect.git"
  },
  "readme": "[![NPM version](https://badge.fury.io/js/harmony-reflect.svg)](http://badge.fury.io/js/harmony-reflect) [![Dependencies](https://david-dm.org/tvcutsem/harmony-reflect.png)](https://david-dm.org/tvcutsem/harmony-reflect)\n\nThis is a shim for the ECMAScript 6 [Reflect](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-reflect-object) and [Proxy](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-proxy-objects) objects.\n\nRead [Why should I use this library?](https://github.com/tvcutsem/harmony-reflect/wiki)\n\nInstallation\n============\n\nIn a browser, after loading\n\n    <script src=\"reflect.js\"></script>\n\na global object `Reflect` is defined that contains reflection methods as defined in the [ES6 draft](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-reflect-object).\n\nIf your browser supports the \"harmony-era\" `Proxy` object that predates ES6 (i.e. Firefox or Chrome), that `Proxy` object is also updated to follow the latest [direct proxies](http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies) [spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-proxy-objects). To create such a proxy, call:\n\n    var proxy = new Proxy(target, handler)\n\nIf you are using node.js (>= v0.7.8), you can install via [npm](http://npmjs.org):\n\n    npm install harmony-reflect\n\nThen:\n\n    node --harmony\n    > var Reflect = require('harmony-reflect');\n\nAPI Docs\n========\n\nThis module exports an object named `Reflect` and updates the global `Proxy` object (if it exists) to be compatible with the latest ECMAScript 6 spec.\n\nThe ECMAScript 6 Proxy API allows one to intercept various operations on Javascript objects.\n\n  * Overview of all [supported traps](https://github.com/tvcutsem/harmony-reflect/tree/master/doc/traps.md) on proxies\n  * The [Reflect API](https://github.com/tvcutsem/harmony-reflect/tree/master/doc/api.md) \n  * The Proxy [Handler API](https://github.com/tvcutsem/harmony-reflect/tree/master/doc/handler_api.md)\n  \nCompatibility\n=============\n\nThe `Reflect` API, with support for proxies, was tested on:\n\n  * Firefox (>= v4.0)\n  * Chrome (>= v19 && <= v37), with the following flag enabled: `chrome://flags/#enable-javascript-harmony` (copy/paste into your address-bar)\n  * `node --harmony` (>= v0.7.8)\n\nNote: Chrome v38 seems to have [removed](https://code.google.com/p/v8/issues/detail?id=1543#c44)\nthe `Proxy` constructor. As a result, this library cannot patch the harmony-era `Proxy` object on\nChrome v38. If you're working with chromium directly, it's still possible to enable proxies using\n`chromium-browser --js-flags=\"--harmony_proxies\"`.\n\nYou can also run the code in one of the following headless JavaScript shells:\n\n  * `v8 --harmony` (>= v3.6)\n  * Any recent `js` spidermonkey shell\n\nDependencies\n============\n\n  *  ECMAScript 5/strict\n  *  To emulate direct proxies:\n    *  old Harmony [Proxies](http://wiki.ecmascript.org/doku.php?id=harmony:proxies)\n    *  Harmony [WeakMaps](http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps)\n\nAfter loading `reflect.js` into your page or other JS environment, be aware that the following globals are patched to be able to recognize emulated direct proxies:\n\n    Object.{freeze,seal,preventExtensions}\n    Object.{isFrozen,isSealed,isExtensible}\n    Object.getPrototypeOf\n    Object.keys\n    Object.prototype.valueOf\n    Object.prototype.hasOwnProperty\n    Object.getOwnPropertyDescriptor\n    Object.defineProperty\n    Object.getOwnPropertyNames\n    Function.prototype.toString\n    Date.prototype.toString\n    Array.isArray\n    Array.prototype.concat\n    Proxy\n\nExamples\n========\n\nThe [examples](https://github.com/tvcutsem/harmony-reflect/tree/master/examples) directory contains a number of examples demonstrating the use of proxies:\n\n  * membranes: wrappers that transitively isolate two object-graphs.\n  * observer: a self-hosted implementation of the ES7 `Object.observe` notification mechanism.\n  * profiler: a simple profiler to collect usage statistics of an object.\n\nOther example uses of proxies (not done by me, but using this library):\n\n  * supporting [negative array indices](https://github.com/sindresorhus/negative-array) a la Python\n  * [tpyo](https://github.com/mathiasbynens/tpyo): using proxies to correct typo's in JS property names\n  * [persistent objects](http://tagtree.tv/es6-proxies): shows how one might go about using proxies to save updates to objects in a database incrementally\n\nProxy Handler API\n=================\n\nThe sister project [proxy-handlers](https://github.com/tvcutsem/proxy-handlers)\ndefines a number of predefined Proxy handlers as \"abstract classes\" that your \ncode can \"subclass\" The goal is to minimize the number of traps that your proxy\nhandlers must implement.\n\nSpec Compatibility\n==================\n\nThis library differs from the rev 27 (august 2014) draft ECMAScript 6 spec as follows:\n\n  * In ES6, `Proxy` will be a constructor function that will _require_ the use\n    of `new`. That is, you must write `new Proxy(target, handler)`. This library\n    exports `Proxy` as an ordinary function which may be called with or without using the `new` operator.\n  * `Array.isArray(obj)` and `[].concat(obj)` are patched so they work\n    transparently on proxies-for-arrays (e.g. when `obj` is `new Proxy([],{})`).\n    The current ES6 draft spec does not treat proxies-for-arrays as genuine\n    arrays for these operations.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tvcutsem/harmony-reflect/issues"
  },
  "_id": "harmony-reflect@1.1.1",
  "_from": "harmony-reflect@~1.1.0"
}
